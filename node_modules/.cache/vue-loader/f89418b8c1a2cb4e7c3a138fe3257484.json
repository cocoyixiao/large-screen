{"remainingRequest":"/Users/edy/work/large-screen/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/edy/work/large-screen/src/components/MapChina.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/edy/work/large-screen/src/components/MapChina.vue","mtime":1680500457058},{"path":"/Users/edy/work/large-screen/node_modules/cache-loader/dist/cjs.js","mtime":1679560601711},{"path":"/Users/edy/work/large-screen/node_modules/thread-loader/dist/cjs.js","mtime":1679560601711},{"path":"/Users/edy/work/large-screen/node_modules/babel-loader/lib/index.js","mtime":1679560602183},{"path":"/Users/edy/work/large-screen/node_modules/cache-loader/dist/cjs.js","mtime":1679560601711},{"path":"/Users/edy/work/large-screen/node_modules/vue-loader/lib/index.js","mtime":1679560602306}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["MapChina.vue"],"names":[],"mappingsfile":"MapChina.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id='mapTest' class=\"china-map\"></div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\nimport china from 'echarts/map/json/china.json'\nimport 'echarts/extension/bmap/bmap'\n// const iconUrl = require('../assets/flag.png');\nconst yaofangData = [\n  '河北省石家庄市',\n  '江苏省徐州市',\n  '四川省成都市',\n  '河南省郑州市',\n  '北京市通州区',\n  '湖南省长沙市',\n  '江苏省无锡市',\n  '山西省太原市',\n  '重庆市巴南区',\n  '北京市平谷区',\n  '北京市朝阳区',\n  '河南省郑州市',\n  '四川省成都市',\n  '辽宁省沈阳市',\n  '北京市丰台区',\n  '广东省广州市',\n  '北京市朝阳区',\n  '广东省广州市',\n  '河北省安国市',\n  '上海市闵行区',\n  '山东省济南市',\n  '天津市武清区',\n  '河南省郑州市',\n  '四川省成都市',\n  '北京市大兴区',\n  '北京市平谷区'\n]\n\nconst shuffle = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;\n    [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]]\n  }\n  return arr\n};\n\nexport default {\n  name: 'mapTest',\n  mounted() {},\n  // 第二步\n  methods: {\n    init(data) {\n      const allProvince = china.features.map(item => item.properties.name)\n      const visualMap = {\n        bottom: 20,\n        left: 20,\n        pieces: [\n          {\n            lte: 1,\n            color: '#9ED7FF'\n          },\n          {\n            gt: 1,\n            lte: 3,\n            color: '#2b90da'\n          },\n          {\n            gt: 3,\n            lte: 5,\n            color: '#217bd8'\n          },\n          {\n            gt: 5,\n            lte: 7,\n            color: '#0048c7'\n          },\n          {\n            gt: 7,\n            color: '#0d3bba'\n          }\n        ],\n        outOfRange: {\n          color: '#ffffff'\n        },\n        label: { // 基本的一些样式\n          show: true,\n          color: '#ffffff'\n        }\n      }\n\n      // console.log(allProvince)\n      \n      data.forEach(item => {\n        if (item.province.includes('省')){\n          this.$set(item, 'name', item.province.replace('省', ''))\n        } else if (item.province.includes('市')){\n          this.$set(item, 'name', item.province.replace('市', ''))\n        } else if (item.province.includes('新疆')) {\n          this.$set(item, 'name', '新疆')\n        } else if (item.province.includes('西藏')) {\n          this.$set(item, 'name', '西藏')\n        } else if (item.province.includes('内蒙古')) {\n          this.$set(item, 'name', '内蒙古')\n        } else if (item.province.includes('广西')) {\n          this.$set(item, 'name', '广西')\n        } else if (item.province.includes('宁夏')) {\n          this.$set(item, 'name', '宁夏')\n        } else if (item.province.includes('重庆')) {\n          this.$set(item, 'name', '重庆')\n        } else if (item.province.includes('香港')) {\n          this.$set(item, 'name', '香港')\n        } else if (item.province.includes('澳门')) {\n          this.$set(item, 'name', '澳门')\n        }\n      })\n    \n      data = data.filter(item => !!item.name)\n      data.forEach((item, index) => {\n        if (!allProvince.includes(item.name)) {\n          data.splice(index, 1)\n        }\n      })\n      \n      // return false\n      let geoCoordMap = require('../assets/data-level.json')\n      data.forEach(item => {\n        this.$set(item, 'value', item.per)\n        this.$set(item, 'count', 0)\n        yaofangData.forEach(yf => {\n          if (yf.includes(item.name)){\n            const count = item.count ? (item.count + 1) : 1\n            this.$set(item, 'count', count)\n          }\n        })\n\n        const obj = geoCoordMap.filter(sub => sub.name === item.name)[0]\n        if (obj && obj.local) {\n          this.$set(item, 'local', obj.local)\n          this.$set(item, 'weight', obj.weight)\n        }\n      })\n\n      // 筛选有药房的省\n      function filterYaofangCity() {\n        const cityArr = JSON.parse(JSON.stringify(data))\n        cityArr.forEach(item => {\n          item.count = 0\n          yaofangData.forEach(sub => {\n            if (sub.includes(item.name)) {\n              item.count = item.count ? (item.count + 1) : 1\n            }\n          })\n        })\n        return cityArr\n      }\n      //生成全国药房的数量\n      const cityArr = filterYaofangCity()\n      // 有药房省有药房的数量\n      // const citys = cityArr.filter(item => item.count > 0)\n      // console.log(citys)\n      // 比较函数\n      // function compare(a, b) {\n      //   let comparison = 0;\n      //   if (a.count < b.count) {\n      //     comparison = 1;\n      //   } else if (a.count > b.count) {\n      //     comparison = -1;\n      //   }\n      //   return comparison;\n      // }\n      // 药房数量从小到大排列\n      // const centerCitys = citys.sort(compare)\n\n      // 按药房的数量生成全国各省市坐标\n      function creatAllPositions() {\n        let arr = []\n        // console.log(data)\n        data.forEach(item => {\n          const obj = JSON.parse(JSON.stringify(item))\n          if (!obj.local) {\n            obj.local.push(1)\n          }\n          obj.value = obj.local\n          obj.symbolSize = obj.count===0 ? 2 : obj.count * 1.2\n          obj.itemStyle = {\n            normal: {\n              color: \"#ffffff\"\n            }\n          }\n          delete obj.count\n          arr.push(obj)\n        })\n        return arr\n      }\n\n      const allCitys = creatAllPositions()\n      const fromAndTo = [\n        {\n          from: '北京',\n          to: ['内蒙古',  '山西',  '天津']\n        },\n        {\n          from: \"河南\",\n          to: [ '山西', '陕西', '江苏', '湖北', '安徽']\n        },\n        {\n          from: \"四川\",\n          to: ['西藏', '青海', '云南', '贵州', '广西', '重庆', '陕西', '甘肃']\n        },\n        {\n          from: \"河北\",\n          to: ['河南',  '山西',  '宁夏']\n        },\n        {\n          from: \"江苏\",\n          to: ['河南',  '安徽', '浙江', '江西']\n        },\n        {\n          from: \"上海\",\n          to: ['浙江', '江苏', '福建']\n        },\n        {\n          from: \"广东\",\n          to: [ '湖北', '广西', '云南', '贵州', '福建', '香港', '澳门', '海南']\n        },\n        {\n          from: \"山西\",\n          to: [ '北京', '陕西', '青海', '内蒙古']\n        },\n        {\n          from: \"山东\",\n          to: ['江苏', '河北', '辽宁', '天津', '浙江']\n        },\n        {\n          from: \"辽宁\",\n          to: ['内蒙古', '吉林', '黑龙江', '天津', '北京']\n        },\n        {\n          from: \"天津\",\n          to: ['山东',  '河北', '内蒙古']\n        },\n        {\n          from: \"重庆\",\n          to: ['陕西', '湖北', '四川', '甘肃', '广西', '新疆']\n        },\n        {\n          from: \"湖南\",\n          to: [ '湖北', '江西', '广西', '福建', '江苏', '香港']\n        }\n      ]\n\n      function creatLines() {\n        let temp = []\n        let secArr = []\n        fromAndTo.forEach(item => {\n          let subArr = []\n          const fromName = item.from\n          const fromObj = cityArr.filter(cen => cen.name === fromName)[0]\n          \n          const toList = item.to\n          toList.forEach(to => {\n            const toObj = cityArr.filter(cen => cen.name === to)[0]\n            const temp = {}\n            temp.fromName = fromObj.name\n            temp.toName = toObj.name\n            temp.coords = [\n              fromObj.local, toObj.local\n            ]\n            subArr.push(temp)\n          })\n          shuffle(subArr)\n          secArr.push(subArr)\n        })\n        temp = [].concat.apply([], secArr)\n        return temp\n      }\n\n      // 生成从中心药房到各大城市的飞行线路\n      // function creatMoveLines() {\n      //   let temp = []\n      //   let secArr = []\n      //   centerCitys.forEach(city => {\n      //     let subArr = []\n      //     cityArr.forEach(sub => {\n      //       if (city.name !== sub.name) {\n      //         const obj = {}\n      //         obj.fromName = city.name\n      //         obj.toName = sub.name\n      //         obj.coords = [\n      //           city.local, sub.local\n      //         ]\n      //         subArr.push(obj)\n      //       }\n      //     })\n      //     shuffle(subArr)\n      //     secArr.push(subArr)\n      //   })\n      //   temp = [].concat.apply([], secArr)\n      //   return temp\n      // }\n      const movePos = creatLines()\n      // console.log(movePos)\n\n      var allData = {\n        \"citys\": allCitys,\n        \"moveLines\": movePos\n      }\n      var mapDom = document.getElementById('mapTest');\n      mapDom.setAttribute('style', 'height:630px')\n      var myChart = echarts.init(mapDom, 'dark')\n      var option;\n      // 接上图第三步，在useEchart方法内\n      echarts.registerMap('china', china);   // 定义这个地图数据为 ‘china’，后续会用\n      myChart.setOption(option = {\n        backgroundColor: 'transparent',\n        title: {\n          top: 60,\n          text: '全国供应链分布',\n        },\n        grid: {\n          left: '0',\n          right: '0',\n          top: '0',\n          bottom: '0',\n          containLabel: true\n        },\n        visualMap: visualMap,\n        geo: [{   // 绘制geo地图\n          map: \"china\", // 定义的数据名称\n          roam: false,\n          aspectScale: 0.9,\n          layoutCenter: [\"50%\", \"50%\"],\n          layoutSize: 800,\n          zoom: 1,\n          itemStyle: {\n            normal: {\n              borderWidth: 1, //边际线大小\n              borderColor: \"#d0d0d0\", //边界线颜色\n            },\n          },\n          label: { // 基本的一些样式\n            show: true,\n            // 自定义label\n            formatter: (params) => {\n              const find = data.find(\n                (item) => item.province ===params.name\n              )\n              if (find) {\n                return `{name|${find.province}}`\n              }\n            },\n            color: '#ffffff',\n\n          },\n          regions: [\n            {\n              name: \"南海诸岛\",\n              itemStyle: {\n                normal: {\n                  opacity: 1,\n                }\n              }\n            },\n          ],\n        }],\n        series: [\n          {\n            name: '全国节点',\n            type: 'map',\n            roam: true,\n            mapType: 'china', // 自定义扩展图表类型\n            label: {\n              show: true\n            },\n            itemStyle: {\n              normal: {\n                color: \"#ffffff\",\n              }\n            },\n            geoIndex: '0', // 先不加这个属性\n            data: data,\n          },\n          {\n            name: '地点',\n            // type: 'effectScatter', // 特效散点图\n            // coordinateSystem: 'geo', // 'cartesian2d'使用二维的直角坐标系。'geo'使用地理坐标系\n            // zlevel: 2, // 所有图形的 zlevel 值。\n            // rippleEffect: { //涟漪特效相关配置。\n            //   brushType: 'fill', //波纹的绘制方式，可选 'stroke' 和 'fill'。\n            //   period: 4, // 动画的时间。\n            //   scale: 2.5, // 动画中波纹的最大缩放比例。\n            // },\n            type: 'effectScatter',\n            coordinateSystem: 'geo',\n            zlevel: 4,\n            symbolSize: 30,\n            label: {\n              normal: {\n                show: false,\n              }\n            },\n            itemStyle: {\n              normal: {\n                color: '#c9b972'\n              }\n            },\n            rippleEffect: {\n              scale: 10,\n              brushType: 'stroke'\n            },\n            data: allData.citys\n          },\n          {\n            type: 'lines',\n            zlevel: 2,\n            effect: {\n                show: true,\n                period: 5, //箭头指向速度，值越小速度越快\n                trailLength: 0.3, //特效尾迹长度[0,1]值越大，尾迹越长重\n                symbol: 'arrow', //箭头图标\n                symbolSize: 5, //图标大小\n            },\n            lineStyle: {\n              normal: {\n                color: '#FFCB26',\n                width: 1, //线条宽度\n                opacity: 0.1, //尾迹线条透明度\n                curveness: .3 //尾迹线条曲直度\n              }\n            },\n            data: allData.moveLines\n          }\n        ]\n      })\n      option && myChart.setOption(option);\n    }\n  }\n}\n</script>\n"]}]}